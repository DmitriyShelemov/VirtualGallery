// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static VirtualGallery.Web.Controllers.AboutController About = new VirtualGallery.Web.Controllers.T4MVC_AboutController();
    public static VirtualGallery.Web.Controllers.AuthController Auth = new VirtualGallery.Web.Controllers.T4MVC_AuthController();
    public static VirtualGallery.Web.Controllers.ContactController Contact = new VirtualGallery.Web.Controllers.T4MVC_ContactController();
    public static VirtualGallery.Web.Controllers.DeliveryController Delivery = new VirtualGallery.Web.Controllers.T4MVC_DeliveryController();
    public static VirtualGallery.Web.Controllers.HomeController Home = new VirtualGallery.Web.Controllers.T4MVC_HomeController();
    public static VirtualGallery.Web.Controllers.ShoppingCartController ShoppingCart = new VirtualGallery.Web.Controllers.T4MVC_ShoppingCartController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class common {
            private const string URLPATH = "~/Scripts/common";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
            public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
            public static readonly string modernizr_2_7_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.7.2.min.js") ? Url("modernizr-2.7.2.min.js") : Url("modernizr-2.7.2.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fileupload {
            private const string URLPATH = "~/Scripts/fileupload";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_attachfile_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.attachfile.min.js") ? Url("jquery.attachfile.min.js") : Url("jquery.attachfile.js");
            public static readonly string jquery_fileupload_fp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload-fp.min.js") ? Url("jquery.fileupload-fp.min.js") : Url("jquery.fileupload-fp.js");
            public static readonly string jquery_fileupload_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload.min.js") ? Url("jquery.fileupload.min.js") : Url("jquery.fileupload.js");
            public static readonly string jquery_iframe_transport_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.iframe-transport.min.js") ? Url("jquery.iframe-transport.min.js") : Url("jquery.iframe-transport.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class graphic {
            private const string URLPATH = "~/Scripts/graphic";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string dat_gui_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dat.gui.min.js") ? Url("dat.gui.min.js") : Url("dat.gui.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class entities {
                private const string URLPATH = "~/Scripts/graphic/entities";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string phoria_entity_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/phoria-entity.min.js") ? Url("phoria-entity.min.js") : Url("phoria-entity.js");
                public static readonly string phoria_renderer_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/phoria-renderer.min.js") ? Url("phoria-renderer.min.js") : Url("phoria-renderer.js");
                public static readonly string phoria_scene_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/phoria-scene.min.js") ? Url("phoria-scene.min.js") : Url("phoria-scene.js");
                public static readonly string phoria_view_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/phoria-view.min.js") ? Url("phoria-view.min.js") : Url("phoria-view.js");
            }
        
            public static readonly string GalleryRoom_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/GalleryRoom.min.js") ? Url("GalleryRoom.min.js") : Url("GalleryRoom.js");
            public static readonly string gl_matrix_min_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl-matrix-min.min.js") ? Url("gl-matrix-min.min.js") : Url("gl-matrix-min.js");
            public static readonly string gl_matrix_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl-matrix.min.js") ? Url("gl-matrix.min.js") : Url("gl-matrix.js");
            public static readonly string phoria_util_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/phoria-util.min.js") ? Url("phoria-util.min.js") : Url("phoria-util.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class jquery {
            private const string URLPATH = "~/Scripts/jquery";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_2_1_0_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.0.intellisense.min.js") ? Url("jquery-2.1.0.intellisense.min.js") : Url("jquery-2.1.0.intellisense.js");
            public static readonly string jquery_2_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.0.min.js") ? Url("jquery-2.1.0.min.js") : Url("jquery-2.1.0.js");
            public static readonly string jquery_2_1_0_min_js = Url("jquery-2.1.0.min.js");
            public static readonly string jquery_2_1_0_min_map = Url("jquery-2.1.0.min.map");
            public static readonly string jquery_cookie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.cookie.min.js") ? Url("jquery.cookie.min.js") : Url("jquery.cookie.js");
            public static readonly string jquery_custom_scrollbar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.custom-scrollbar.min.js") ? Url("jquery.custom-scrollbar.min.js") : Url("jquery.custom-scrollbar.js");
            public static readonly string jquery_reveal_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.reveal.min.js") ? Url("jquery.reveal.min.js") : Url("jquery.reveal.js");
            public static readonly string jquery_textchange_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.textchange.min.js") ? Url("jquery.textchange.min.js") : Url("jquery.textchange.js");
            public static readonly string jquery_ui_widget_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.widget.min.js") ? Url("jquery.ui.widget.min.js") : Url("jquery.ui.widget.js");
            public static readonly string jquery_unobtrusive_ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.unobtrusive-ajax.min.js") ? Url("jquery.unobtrusive-ajax.min.js") : Url("jquery.unobtrusive-ajax.js");
            public static readonly string jquery_unobtrusive_ajax_min_js = Url("jquery.unobtrusive-ajax.min.js");
            public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
            public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
            public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
            public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
            public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        }
    
        public static readonly string ShoppingCart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ShoppingCart.min.js") ? Url("ShoppingCart.min.js") : Url("ShoppingCart.js");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Bootstrap {
            private const string URLPATH = "~/Content/Bootstrap";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-theme.min.css") ? Url("bootstrap-theme.min.css") : Url("bootstrap-theme.css");
                 
            public static readonly string bootstrap_theme_css_map = Url("bootstrap-theme.css.map");
            public static readonly string bootstrap_theme_min_css = Url("bootstrap-theme.min.css");
            public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
                 
            public static readonly string bootstrap_css_map = Url("bootstrap.css.map");
            public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class FontAwesome {
            private const string URLPATH = "~/Content/FontAwesome";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class css {
                private const string URLPATH = "~/Content/FontAwesome/css";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string font_awesome_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/font-awesome.min.css") ? Url("font-awesome.min.css") : Url("font-awesome.css");
                     
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class fonts {
                private const string URLPATH = "~/Content/FontAwesome/fonts";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
                public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
                public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
                public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
                public static readonly string FontAwesome_otf = Url("FontAwesome.otf");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class less {
                private const string URLPATH = "~/Content/FontAwesome/less";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bordered_pulled_less = Url("bordered-pulled.less");
                public static readonly string core_less = Url("core.less");
                public static readonly string fixed_width_less = Url("fixed-width.less");
                public static readonly string font_awesome_less = Url("font-awesome.less");
                public static readonly string icons_less = Url("icons.less");
                public static readonly string larger_less = Url("larger.less");
                public static readonly string list_less = Url("list.less");
                public static readonly string mixins_less = Url("mixins.less");
                public static readonly string path_less = Url("path.less");
                public static readonly string rotated_flipped_less = Url("rotated-flipped.less");
                public static readonly string spinning_less = Url("spinning.less");
                public static readonly string stacked_less = Url("stacked.less");
                public static readonly string variables_less = Url("variables.less");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class scss {
                private const string URLPATH = "~/Content/FontAwesome/scss";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _bordered_pulled_scss = Url("_bordered-pulled.scss");
                public static readonly string _core_scss = Url("_core.scss");
                public static readonly string _fixed_width_scss = Url("_fixed-width.scss");
                public static readonly string _icons_scss = Url("_icons.scss");
                public static readonly string _larger_scss = Url("_larger.scss");
                public static readonly string _list_scss = Url("_list.scss");
                public static readonly string _mixins_scss = Url("_mixins.scss");
                public static readonly string _path_scss = Url("_path.scss");
                public static readonly string _rotated_flipped_scss = Url("_rotated-flipped.scss");
                public static readonly string _spinning_scss = Url("_spinning.scss");
                public static readonly string _stacked_scss = Url("_stacked.scss");
                public static readonly string _variables_scss = Url("_variables.scss");
                public static readonly string font_awesome_scss = Url("font-awesome.scss");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fonts {
            private const string URLPATH = "~/Content/fonts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string glyphicons_halflings_regular_eot = Url("glyphicons-halflings-regular.eot");
            public static readonly string glyphicons_halflings_regular_svg = Url("glyphicons-halflings-regular.svg");
            public static readonly string glyphicons_halflings_regular_ttf = Url("glyphicons-halflings-regular.ttf");
            public static readonly string glyphicons_halflings_regular_woff = Url("glyphicons-halflings-regular.woff");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Img {
            private const string URLPATH = "~/Content/Img";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string aside_brush_png = Url("aside-brush.png");
            public static readonly string bg_jpg = Url("bg.jpg");
            public static readonly string book_jpg = Url("book.jpg");
            public static readonly string brush_png = Url("brush.png");
            public static readonly string koffee_cup_png = Url("koffee-cup.png");
            public static readonly string modal_gloss_png = Url("modal-gloss.png");
            public static readonly string ornament_png = Url("ornament.png");
            public static readonly string scroll_blot_png = Url("scroll-blot.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Textures {
                private const string URLPATH = "~/Content/Img/Textures";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string ashley_ruAQ50909_resize_JPG = Url("ashley.ruAQ50909_resize.JPG");
                public static readonly string ashley_ruAQ50911_resize_JPG = Url("ashley.ruAQ50911_resize.JPG");
                public static readonly string marakeshFloor_JPG = Url("marakeshFloor.JPG");
                public static readonly string roof_jpg = Url("roof.jpg");
                public static readonly string stariy_parket_jpg = Url("stariy-parket.jpg");
            }
        
        }
    
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
             
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


