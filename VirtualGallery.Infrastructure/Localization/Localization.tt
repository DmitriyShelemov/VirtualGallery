<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>

<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Globalization;

namespace VirtualGallery.Infrastructure.Localization
{
    public static class Localization 
    {		
		private static readonly LocalizationManager _localizationManager = LocalizationManager.GetInstance();

		[Obsolete("Please, refactor all usings of Localization.Hardcoded")]
		public static string Hardcoded(string text)
		{
			return text;
		}

		public static List<LocalizationSettings> GetAvalibleLocalizations()
        {
            return _localizationManager.GetAvalibleLocalizations();
        }
	
		public static LocalizationSettings GetLocalizationByCulture(string cultureName)
		{
		    return _localizationManager.GetLocalizationByCulture(cultureName);
		}

		public static LocalizationSettings GetLocalizationByLanguageKey(LanguageKey languageKey)
		{
			return _localizationManager.GetLocalizationByLanguageKey(languageKey);
		}
		
		public static LocalizationSettings GetLocalizationByLocalizationName(string localizationName)
        {
            return _localizationManager.GetLocalizationByLocalizationName(localizationName);
        }

		public static CultureInfo GetCultureInfo(LanguageKey languageKey)
		{
		   return _localizationManager.GetCultureInfo(languageKey);
		}

		public static LocalizationSettings GetCurrentLocalization()
		{
			return _localizationManager.GetCurrentLocalization();
		}

		public static void SetCurrentLocalization(LocalizationSettings localization)
		{
			_localizationManager.SetCurrentLocalization(localization);
		}

		public static LocalizationSettings GetDefaultLocalization()
		{
			return _localizationManager.GetDefaultLocalization();
		}
		
		public static string GetString(string key)
        {
            return _localizationManager.GetString(key);            
        }		

		public static string GetString(string key, LanguageKey languageKey)
        {
            return _localizationManager.GetString(key, languageKey);            
        }	

		public static void AddTestLocalizationLanguage()
		{
			_localizationManager.AddTestLocalizationLanguage();            
		}
			
		public class Names
		{
		<#foreach(string key in GetLocalizationKeys()){#>	public const string <#= key #> = "<#= key #>";
		<# } #> 		    	
		}

		<#foreach(string key in GetLocalizationKeys()){
#>
public static string <#= key #>
		{
			get{ return GetString(Names.<#=key#>);}
		}
		<# } #> 		    	
	}
}
<#+ 
const string ResourcesBasePath = @"Resourses\Localization.resx";
       
List<string> _localizationKeys  = null;

List<string> GetLocalizationKeys()
{	
	if (_localizationKeys == null)
	{
		var result = new List<string>();		
		XmlDocument xml = new XmlDocument();		
		xml.Load(Host.ResolvePath(ResourcesBasePath));
		XmlNodeList xnList = xml.SelectNodes("root/data");	
		foreach (XmlNode xn in xnList)
		{
			string name = xn.Attributes["name"].Value;		
			result.Add(name);
		}
		_localizationKeys = result;
    }	
	return _localizationKeys;	
} #>